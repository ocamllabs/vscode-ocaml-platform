name: Main workflow

on:
  - pull_request
  - push

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        ocaml-version:
          - 4.11.x
        node-version:
          - 14.x

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-version }}
        uses: actions-ml/setup-ocaml@master
        with:
          ocaml-version: ${{ matrix.ocaml-version }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install opam packages
        run: |
          opam pin ocaml-lsp-server https://github.com/ocaml/ocaml-lsp.git --no-action
          opam install ocaml-lsp-server . --deps-only --with-test

      - name: Use latest esy
        run: npm install --global esy

      # This step is required because esy's home directory doesn't exist at this point
      - name: Install esy packages
        run: esy install

      - name: Get esy cache directory path
        id: esy-cache-dir-path
        run: node .github/workflows/print_esy_cache.js

      - name: Restore esy cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.esy-cache-dir-path.outputs.dir }}
          key: esy-${{ matrix.os }}-${{ hashFiles('esy.lock/index.json') }}
          restore-keys: esy-${{ matrix.os }}-

      - name: Build esy packages
        # Cleanup build cache in case dependencies have changed
        run: |
          esy build
          esy cleanup .

      - name: Build extension
        run: opam exec -- make build

      - name: Install npm packages
        run: yarn --frozen-lockfile

      - name: Check formatting
        run: yarn fmt:check

      - name: Package extension
        run: yarn package

      - name: Upload artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: ocaml-platform-${{ github.sha }}
          path: ocaml-platform-*.vsix

      - name: Test extension
        uses: GabrielBB/xvfb-action@v1
        with:
          run: yarn test

      - name: Publish extension to VSCode Marketplace
        if: success() && runner.os == 'Linux' && contains(github.ref, 'refs/tags')
        run: yarn deploy:vsce
        env:
          VSCE_PAT: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}

      - name: Publish extension to Open VSX
        if: success() && runner.os == 'Linux' && contains(github.ref, 'refs/tags')
        run: yarn deploy:ovsx ocaml-platform-*.vsix --pat "$OVSX_PAT"
        env:
          OVSX_PAT: ${{ secrets.OPEN_VSX_TOKEN }}

      - name: Create Release
        if: runner.os == 'Linux' && contains(github.ref, 'refs/tags')
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ github.token }}

  lint-fmt:
    strategy:
      matrix:
        ocaml-version:
          - 4.11.x

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-version }}
        uses: actions-ml/setup-ocaml@master
        with:
          ocaml-version: ${{ matrix.ocaml-version }}
          lint-fmt: true

  lint-opam:
    strategy:
      matrix:
        ocaml-version:
          - 4.11.x

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-version }}
        uses: actions-ml/setup-ocaml@master
        with:
          ocaml-version: ${{ matrix.ocaml-version }}
          lint-opam: true

      - name: Install opam packages
        run: opam install  . --deps-only

      - name: Build extension
        run: opam exec -- make build
