{
  "name": "dune",
  "scopeName": "source.dune",
  "fileTypes": ["dune"],
  "patterns": [{ "include": "#stanzas" }, { "include": "#general" }],
  "repository": {
    "stanzas": {
      "patterns": [
        {
          "comment": "jbuild_version",
          "begin": "\\([[:space:]]*(jbuild_version)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "contentName": "constant.language.dune",
          "patterns": [{ "include": "#general" }]
        },

        {
          "comment": "library",
          "begin": "\\([[:space:]]*(library)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [
            {
              "comment": "name/public_name/package",
              "begin": "\\([[:space:]]*(name|public_name|package)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.other.declaration.dune",
              "patterns": [{ "include": "#general" }]
            },
            {
              "comment": "synopsis",
              "begin": "\\([[:space:]]*(synopsis)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "patterns": [{ "include": "#general" }]
            },
            {
              "comment": "modules",
              "begin": "\\([[:space:]]*(modules)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.other.declaration.dune",
              "patterns": [{ "include": "#general" }]
            },
            {
              "comment": "libraries",
              "begin": "\\([[:space:]]*(libraries)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.other.declaration.dune",
              "patterns": [{ "include": "#general" }]
            },
            {
              "comment": "wrapped",
              "begin": "\\([[:space:]]*(wrapped)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.declaration.other.dune",
              "patterns": [{
                  "comment": "transition",
                  "begin": "\\([[:space:]]*(transition)\\b",
                  "end": "\\)",
                  "beginCaptures": {
                    "1": { "name": "keyword.language.dune" }
                  },
                  "contentName": "variable.other.declaration.dune",
                  "patterns": [{ "include": "#general" }]
                }]
              
            },
            {
              "comment": "preprocess",
              "begin": "\\([[:space:]]*(preprocess)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.other.declaration.dune",
              "patterns": [{
                  "comment": "no_preprocessing/action/pps/staged_pps/future_syntax",
                  "begin": "\\([[:space:]]*(no_preprocessing|action|pps|staged_pps|future_syntax)\\b",
                  "end": "\\)",
                  "beginCaptures": {
                    "1": { "name": "keyword.language.dune" }
                  },
                  "contentName": "variable.other.declaration.dune",
                  "patterns": [{ "include": "#general" }]
                }]
            },
            {
              "comment": "preprocessor_deps",
              "begin": "\\([[:space:]]*(preprocessor_deps)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.other.declaration.dune",
              "patterns": [{ "include": "#general" }]
            },
            {
              "comment": "optional/foreign_stubs/foreign_archives/self_build_stubs_archive/c_names/c_flags/cxx_names/cxx_flags/install_c_headers/modes/no_dynlink",
              "begin": "\\([[:space:]]*(optional|foreign_stubs|foreign_archives|self_build_stubs_archive|c_names|c_flags|cxx_names|cxx_flags|install_c_headers|modes|no_dynlink)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.other.declaration.dune",
              "patterns": [{ "include": "#general" }]
            },
            {
              "comment": "kind",
              "begin": "\\([[:space:]]*(kind)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.other.declaration.dune",
              "patterns": [{
                "comment": "ppx_rewriter/ppx_deriver/cookies",
                "begin": "\\([[:space:]]*(ppx_rewriter|ppx_deriver|cookies)\\b",
                "end": "\\)",
                "beginCaptures": {
                  "1": { "name": "variable.other.declaration.dune" }
                },
                "patterns": [{ "include": "#general" }]
              },
              { "include": "#general" }]
            },
            {
              "comment": "ppx_runtime_libraries/virtual_deps/flags/ocamlc_flags/ocamlopt_flags/library_flags/ocamlopt/c_library_flags/modules_without_implementation/private_modules/allow_overlapping_dependencies/enabled_if/inline_tests/root_module",
              "begin": "\\([[:space:]]*(ppx_runtime_libraries|flags|virtual_deps|flags|ocamlc_flags|ocamlopt_flags|library_flags|ocamlopt|c_library_flags|modules_without_implementation|private_modules|allow_overlapping_dependencies|enabled_if|inline_tests|root_module)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.declaration.other.dune",
              "patterns": [{ "include": "#general" }]
            },
            {
              "comment": "js_of_ocaml",
              "begin": "\\([[:space:]]*(js_of_ocaml)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "keyword.language.dune" }
              },
              "contentName": "variable.other.declaration.dune",
              "patterns": [{
                "comment": "javascript_files/flags",
                "begin": "\\([[:space:]]*(javascript_files|flags)\\b",
                "end": "\\)",
                "beginCaptures": {
                  "1": { "name": "keyword.language.dune" }
                },
                "contentName": "variable.other.declaration.dune",
                "patterns": [{ "include": "#general" }]
              },
              { "include": "#general" }]
            },
            { "include": "#general" }
          ]
        },
        {
          "comment": "foreign_library",
          "begin": "\\([[:space:]]*(foreign_library)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "names/archive_name/language/include_dir",
            "begin": "\\([[:space:]]*(names|archive_name|language|include_dir)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "keyword.language.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{ "include": "#general" }]
          },
          { "include": "#general" }]
        },
        {
          "comment": "deprecated_library_name",
          "begin": "\\([[:space:]]*(deprecated_library_name)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "old_public_name/new_public_name",
            "begin": "\\([[:space:]]*(old_public_name|new_public_name)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "variable.declaration.language.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{ "include": "#general" }]
          }]
        },
        {
          "comment": "executable/executables",
          "begin": "\\([[:space:]]*(executables*)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "name/public_name/package/libraries/link_flags/link_deps/modules/root_module/preprocess/preprocessor_deps/modules_without_implementation/optional/enabled_if/promote/foreign_stubs/foreign_archives/forbidden_libraries/embed_in_plugin_libraries",
            "begin": "\\([[:space:]]*(name|public_name|package/libraries|link_flags|link_deps|modules|root_module|preprocess|preprocessor_deps|modules_without_implementation|optional|enabled_if|promote|foreign_stubs|foreign_archives|forbidden_libraries|embed_in_plugin_libraries)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "keyword.language.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{ "include": "#general" }]
          }]
        },
        {
          "comment": "rule",
          "begin": "\\([[:space:]]*(rule)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "target/targets/deps/action/mode/fallback/locks/alias/package/enabled_if",
            "begin": "\\([[:space:]]*(targets*|deps|action|mode|fallback|locks|alias|package|enabled_if)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "constant.language.variable.action.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{
              "comment": "standard/promote/promote-until-clean/promote-into/promote-until-clean-into/into/only",
              "begin": "\\([[:space:]]*(standard|promote|promote-until-clean|promote-into|promote-until-clean-into|into|only)\\b",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "constant.language.variable.action.dune" }
              },
              "contentName": "variable.other.declaration.dune",
              "patterns": [{ "include": "#general" }]
            }, 
            { "include": "#general" }]
          },
          { "include": "#general" }]
        },
        {
          "comment": "ocamllex",
          "begin": "\\([[:space:]]*(ocamllex)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "modules/mode",
            "begin": "\\([[:space:]]*(modules|mode)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "keyword.language.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{ "include": "#general" }]
          },
          { "include": "#general" }]
        },
        {
          "comment": "ocamlyacc",
          "begin": "\\([[:space:]]*(ocamlyacc)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "modules/mode",
            "begin": "\\([[:space:]]*(modules|mode)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "keyword.language.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{ "include": "#general" }]
          },
          { "include": "#general" }]
        },
        {
          "comment": "menhir",
          "begin": "\\([[:space:]]*(menhir)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "modules/merge_into/flags/infer",
            "begin": "\\([[:space:]]*(modules|merge_into|flags|infer)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "keyword.language.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{ "include": "#general" }]
          },
          { "include": "#general" }]
        },
        {
          "comment": "cinaps",
          "begin": "\\([[:space:]]*(cinaps)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "files/libraries",
            "begin": "\\([[:space:]]*(files|libraries)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "keyword.language.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{ "include": "#general" }]
          },
          { "include": "#general" }]
        },
        {
          "comment": "documentation",
          "begin": "\\([[:space:]]*(documentation)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "package/mld_files",
            "begin": "\\([[:space:]]*(package|mld_files)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "keyword.language.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{ "include": "#general" }]
          }]
        },
        {
          "comment": "alias",
          "begin": "\\([[:space:]]*(alias)\\b",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.language.dune" }
          },
          "patterns": [{
            "comment": "name/deps/action/package/locks/enabled_if",
            "begin": "\\([[:space:]]*(name|deps|action|package|locks|enabled_if)\\b",
            "end": "\\)",
            "beginCaptures": {
              "1": { "name": "keyword.language.dune" }
            },
            "contentName": "variable.other.declaration.dune",
            "patterns": [{ "include": "#general" }]
          }]
        } 
      ]
    },

    "general": {
      "patterns": [
        {
          "name": "comment.line.dune",
          "begin": ";",
          "end": "$"
        },
        {
          "name": "string.quoted.line.dune",
          "begin": "\"\\\\\\|",
          "end": "$",
          "patterns": [{ "include": "#escape-characters" }]
        },
        {
          "name": "string.quoted.line.dune",
          "begin": "\"\\\\>",
          "end": "$"
        },
        {
          "name": "string.quoted.double.dune",
          "begin": "\"",
          "end": "\"",
          "patterns": [{ "include": "#escape-characters" }]
        },
        {
          "comment": "symbol",
          "name": "constant.symbol.dune",
          "match": "(:[[:alpha:]-]+)\\b"
        },
        {
          "comment": "number or version",
          "name": "constant.numeric.dune",
          "match": "\\b([[:digit:]](\\.[[:digit:]]+)+)\\b"
        },
        {
          "comment": "true or false",
          "name": "constant.language.dune",
          "match": "\\b(true|false)\\b"
        },
        {
          "comment": "variable",
          "begin": "%\\{",
          "end": "\\}",
          "beginCaptures": [{ "name": "keyword.operator.dune" }],
          "endCaptures": [{ "name": "keyword.operator.dune" }],
          "patterns": [{ "include": "#variables" }]
        },
        {
          "comment": "boolean/predicate language",
          "begin": "\\([[:space:]]*(=|<>|>=|<=|<|>)",
          "end": "\\)",
          "beginCaptures": { "1": { "name": "keyword.operator.dune" } },
          "patterns": [{ "include": "#general" }]
        },
        {
          "comment": "boolean/predicate language",
          "begin": "\\([[:space:]]*(and|or|not)\\b",
          "end": "\\)",
          "beginCaptures": { "1": { "name": "keyword.operator.dune" } },
          "patterns": [{ "include": "#general" }]
        },
        {
          "comment": "ordered set language",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "name": "keyword.operator.dune", "match": "/" },
            { "include": "#general" }
          ]
        }
      ]
    },

    "escape-characters": {
      "patterns": [
        {
          "comment": "escaped newline",
          "name": "constant.character.escape.dune",
          "match": "\\\\$"
        },
        {
          "comment": "escaped character",
          "name": "constant.character.escape.dune",
          "match": "\\\\(n|r|b|t|\\\\|\")"
        },
        {
          "comment": "character from decimal ASCII code",
          "name": "constant.character.escape.dune",
          "match": "\\\\[[:digit:]]{3}"
        },
        {
          "comment": "character from hexadecimal ASCII code",
          "name": "constant.character.escape.dune",
          "match": "\\\\x[[:xdigit:]]{2}"
        },
        {
          "comment": "escaped variable",
          "begin": "(\\%\\{)",
          "end": "(\\})",
          "beginCaptures": [{ "name": "constant.character.escape.dune" }],
          "endCaptures": [{ "name": "constant.character.escape.dune" }],
          "patterns": [{ "include": "#variables" }]
        }
      ]
    },

    "variables": {
      "patterns": [
        {
          "name": "keyword.operator.variable.dune",
          "match": ":"
        },
        {
          "name": "constant.language.variable.dune",
          "match": "\\b(project_root|workspace_root)\\b"
        },
        {
          "name": "constant.language.variable.dune",
          "match": "\\b(CC|CXX)\\b"
        },
        {
          "name": "constant.language.variable.dune",
          "match": "\\b(ocaml_bin|ocaml|ocamlc|ocamlopt|ocaml_version|ocaml_where|ocaml-config)\\b"
        },
        {
          "name": "constant.language.variable.dune",
          "match": "\\b(profile|null|context_name|ignoring_promoted_rule)\\b"
        },
        {
          "name": "constant.language.variable.dune",
          "match": "\\b(ext_obj|ext_asm|ext_lib|ext_dll|ext_exe|ext_plugin)\\b"
        },
        {
          "name": "constant.language.variable.dune",
          "match": "\\b(arch_sixtyfour|architecture|os_type|model|system)\\b"
        },
        {
          "name": "constant.language.variable.dune",
          "match": "\\b(cmo|cmi|cma|cmx|cmxa)\\b"
        },
        {
          "name": "constant.language.variable.action.dune",
          "match": "\\^"
        },
        {
          "name": "constant.language.variable.action.dune",
          "match": "\\b(targets|target|deps|dep|exe|bin|version)\\b"
        },
        {
          "name": "constant.language.variable.action.dune",
          "match": "\\b(lib-available|lib-private|libexec-private|libexec|lib)\\b"
        },
        {
          "name": "constant.language.variable.action.dune",
          "match": "\\b(read-lines|read-strings|read)\\b"
        }
      ]
    }
  }
}
