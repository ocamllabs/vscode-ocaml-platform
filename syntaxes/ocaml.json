{
  "name": "OCaml",
  "scopeName": "source.ocaml",
  "fileTypes": [".ml", ".mli"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#characters"
    },
    {
      "include": "#bindings"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#groupings"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#types"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "comment": "ocamldoc comment",
          "name": "comment.doc.ocaml",
          "begin": "\\(\\*\\*",
          "end": "\\*\\)",
          "patterns": [
            {
              "comment": "ocamldoc documentation tag",
              "name": "keyword.doc-tag.ocaml",
              "match": "\\@[a-z]+"
            },
            {
              "comment": "embedded ocaml source",
              "begin": "\\[",
              "end": "\\]",
              "contentName": "source.embedded.ocaml",
              "patterns": [{ "include": "source.ocaml" }]
            },
            { "include": "#comments" }
          ]
        },
        {
          "comment": "block comment",
          "name": "comment.block.ocaml",
          "begin": "\\(\\*",
          "end": "\\*\\)",
          "patterns": [{ "include": "#comments" }]
        },
        {
          "comment": "line number directive",
          "name": "comment.line.pragma.ocaml",
          "match": "^#\\s*[0-9]+\\s*\".*\"(\\s*)$"
        }
      ]
    },

    "strings": {
      "patterns": [
        {
          "comment": "quoted string literal",
          "name": "string.quoted.braced.ocaml",
          "begin": "\\{(%%?[A-Za-z_][A-Za-z0-9_']*(\\.[A-Za-z_][A-Za-z0-9_']*)*\\s*)?[a-z_]*\\|",
          "end": "\\|[a-z_]*\\}",
          "beginCaptures": {
            "1": { "patterns": [{ "include": "source.ocaml" }] }
          },
          "patterns": [{ "include": "#strings" }]
        },
        {
          "comment": "string literal",
          "name": "string.quoted.double.ocaml",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "comment": "escaped newline",
              "name": "constant.character.escape.dune",
              "match": "\\\\$"
            },
            {
              "comment": "escaped backslash",
              "name": "constant.character.escape.ocaml",
              "match": "\\\\\\\\"
            },
            {
              "comment": "escaped quote or whitespace",
              "name": "constant.character.escape.ocaml",
              "match": "\\\\[\"'ntbr ]"
            },
            {
              "comment": "character from decimal ASCII code",
              "name": "constant.character.escape.ocaml",
              "match": "\\\\[0-9]{3}"
            },
            {
              "comment": "character from hexadecimal ASCII code",
              "name": "constant.character.escape.ocaml",
              "match": "\\\\x[0-9A-Fa-f]{2}"
            },
            {
              "comment": "character from octal ASCII code",
              "name": "constant.character.escape.ocaml",
              "match": "\\\\o[0-3][0-7]{2}"
            },
            {
              "comment": "unicode character escape sequence",
              "name": "constant.character.escape.ocaml",
              "match": "\\\\u\\{[0-9A-Fa-f]{1,6}\\}"
            },
            {
              "comment": "printf format string",
              "name": "constant.character.printf.ocaml",
              "match": "%[-0+ #]*([0-9]+|\\*)?(.([0-9]+|\\*))?[lLn]?[diunlLNxXosScCfFeEgGhHBbat!%@,]"
            },
            {
              "comment": "unknown escape sequence",
              "name": "invalid.illegal.unknown-escape.ocaml",
              "match": "\\\\."
            }
          ]
        }
      ]
    },

    "characters": {
      "patterns": [
        {
          "comment": "character literal",
          "name": "string.quoted.other.ocaml constant.character.ocaml",
          "match": "'.'"
        },
        {
          "comment": "character literal from escaped backslash",
          "name": "string.quoted.other.ocaml constant.character.ocaml",
          "match": "'(\\\\\\\\)'",
          "captures": { "1": { "name": "constant.character.escape.ocaml" } }
        },
        {
          "comment": "character literal from escaped quote or whitespace",
          "name": "string.quoted.other.ocaml constant.character.ocaml",
          "match": "'(\\\\[\"'ntbr ])'",
          "captures": { "1": { "name": "constant.character.escape.ocaml" } }
        },
        {
          "comment": "character literal from decimal ASCII code",
          "name": "string.quoted.other.ocaml constant.character.ocaml",
          "match": "'(\\\\[0-9]{3})'",
          "captures": { "1": { "name": "constant.character.escape.ocaml" } }
        },
        {
          "comment": "character literal from hexadecimal ASCII code",
          "name": "string.quoted.other.ocaml constant.character.ocaml",
          "match": "'(\\\\x[0-9A-Fa-f]{2})'",
          "captures": { "1": { "name": "constant.character.escape.ocaml" } }
        },
        {
          "comment": "character literal from octal ASCII code",
          "name": "string.quoted.other.ocaml constant.character.ocaml",
          "match": "'(\\\\o[0-3][0-7]{2})'",
          "captures": { "1": { "name": "constant.character.escape.ocaml" } }
        },
        {
          "comment": "character literal from unknown escape sequence",
          "name": "string.quoted.other.ocaml constant.character.ocaml",
          "match": "'(\\\\.)'",
          "captures": {
            "1": { "name": "invalid.illegal.unknown-escape.ocaml" }
          }
        }
      ]
    },

    "bindings": {
      "patterns": [
        {
          "comment": "optional labeled argument",
          "name": "variable.parameter.optional.ocaml",
          "match": "\\?([a-z_][A-Za-z0-9_']*)?"
        },
        {
          "comment": "labeled argument",
          "name": "variable.parameter.labeled.ocaml",
          "match": "~[a-z_][A-Za-z0-9_']*"
        },
        {
          "comment": "for loop",
          "match": "\\b(for)\\s([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "local open/exception/module",
          "match": "\\b(let)\\s+(open|exception|module)\\b",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" }
          }
        },
        {
          "comment": "let expression",
          "match": "\\b(let)\\s+(rec\\s+)?(lazy\\s+)?([a-z_][A-Za-z0-9_']*)\\b(?!\\s*,)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "name": "keyword.ocaml" },
            "4": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "type declaration",
          "match": "\\b(type)\\s+(nonrec\\s+)?(_\\s+|[+-]?'[A-Za-z][A-Za-z0-9_']*\\s+|\\(.*\\)\\s+)?([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "patterns": [{ "include": "source.ocaml" }] },
            "4": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "and declaration for let bindings, type declarations, class bindings, or class type definitions",
          "match": "\\b(and)\\s+((?:virtual|lazy)\\s+)?(_\\s+|'[A-Za-z][A-Za-z0-9_']*\\s+|\\(.*\\)\\s+)?([a-z_][A-Za-z0-9_']*)\\b(?!\\s*,)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "patterns": [{ "include": "source.ocaml" }] },
            "4": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "using binding operators",
          "match": "\\b(let|and)([$&*+\\-/=>@^|<][!?$&*+\\-/=>@^|%:]*)\\s*(lazy\\s+)?([a-z_][A-Za-z0-9_']*)\\b(?!\\s*,)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "external declaration",
          "begin": "\\b(external)\\s+([a-z_][A-Za-z0-9_']*)?",
          "beginCaptures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "entity.name.function.binding.ocaml" }
          },
          "end": "$",
          "patterns": [
            {
              "comment": "string literal",
              "name": "string.quoted.double.ocaml",
              "begin": "\"",
              "end": "\""
            },
            { "include": "source.ocaml" }
          ]
        },
        {
          "comment": "first class module packing",
          "match": "\\(\\s*(val)\\s+([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "patterns": [{ "include": "source.ocaml" }] }
          }
        },
        {
          "comment": "val declaration for class instance variables",
          "match": "\\b(val)\\s+(virtual)\\s+(mutable)\\s+([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "name": "keyword.ocaml" },
            "4": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "val declaration for let bindings or class instance variables",
          "match": "\\b(val|val!)\\s+(mutable\\s+)?(virtual\\s+)?([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "name": "keyword.ocaml" },
            "4": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "class method declaration",
          "match": "\\b(method)\\s+(virtual)\\s+(private)\\s+([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "name": "keyword.ocaml" },
            "4": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "class method declaration",
          "match": "\\b(method|method!)\\s+(private\\s+)?(virtual\\s+)?([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "name": "keyword.ocaml" },
            "4": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "class specification or class type definition with type parameters",
          "match": "\\b(class)\\s*(\\s+type)?(\\s+virtual)?\\s*(\\[.*\\])\\s*([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "name": "keyword.ocaml" },
            "4": { "patterns": [{ "include": "source.ocaml" }] },
            "5": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "class specification or class type definition",
          "match": "\\b(class)\\s+(type\\s+)?(virtual\\s+)?([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "keyword.ocaml" },
            "3": { "name": "keyword.ocaml" },
            "4": { "name": "entity.name.function.binding.ocaml" }
          }
        },
        {
          "comment": "named self in object",
          "match": "\\b(object)\\s*\\(\\s*([a-z_][A-Za-z0-9_']*)",
          "captures": {
            "1": { "name": "keyword.ocaml" },
            "2": { "name": "entity.name.function.binding.ocaml" }
          }
        }
      ]
    },

    "keywords": {
      "patterns": [
        {
          "comment": "ocaml toplevel directive",
          "name": "keyword.other.ocaml",
          "match": "(#use|#load)\\b"
        },
        {
          "comment": "reserved ocaml keyword",
          "name": "keyword.ocaml",
          "match": "\\b(and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|virtual|when|while|with)\\b"
        }
      ]
    },

    "groupings": {
      "patterns": [
        {
          "comment": "unit literal",
          "name": "constant.language.ocaml strong",
          "match": "\\(\\)"
        },

        {
          "comment": "empty list",
          "name": "constant.language.ocaml strong",
          "match": "\\[\\]"
        },

        {
          "comment": "empty array",
          "name": "constant.language.ocaml strong",
          "match": "\\[\\|\\|\\]"
        },

        {
          "comment": "array literal",
          "begin": "\\[\\|",
          "beginCaptures": [{ "name": "keyword.other.ocaml" }],
          "end": "\\|\\]",
          "endCaptures": [{ "name": "keyword.other.ocaml" }],
          "patterns": [{ "include": "$self" }]
        },

        {
          "comment": "list literal",
          "begin": "\\[",
          "beginCaptures": [{ "name": "keyword.other.ocaml" }],
          "end": "\\]",
          "endCaptures": [{ "name": "keyword.other.ocaml" }],
          "patterns": [{ "include": "$self" }]
        },

        {
          "comment": "object duplication",
          "begin": "{<",
          "beginCaptures": [{ "name": "keyword.other.ocaml" }],
          "end": ">}",
          "endCaptures": [{ "name": "keyword.other.ocaml" }],
          "patterns": [{ "include": "$self" }]
        },

        {
          "comment": "record literal",
          "begin": "{",
          "end": "}",
          "patterns": [{ "include": "$self" }]
        }
      ]
    },

    "operators": {
      "patterns": [
        {
          "comment": "binding operator",
          "name": "keyword.operator.ocaml",
          "match": "\\b(let|and)[$&*+\\-/=>@^|<][!?$&*+\\-/=>@^|%:]*"
        },
        {
          "comment": "infix symbol",
          "name": "keyword.operator.ocaml",
          "match": "[$&*+\\-/=>@^|%<][~!?$&*+\\-/=>@^|%<:.]*"
        },
        {
          "comment": "infix symbol",
          "name": "keyword.operator.ocaml",
          "match": "#[~!?$&*+\\-/=>@^|%<:.]+"
        },
        {
          "comment": "prefix symbol",
          "name": "keyword.operator.ocaml",
          "match": "![~!?$&*+\\-/=>@^|%<:.]*"
        },
        {
          "comment": "prefix symbol",
          "name": "keyword.operator.ocaml",
          "match": "[?~][~!?$&*+\\-/=>@^|%<:.]+"
        },
        {
          "comment": "named operator",
          "name": "keyword.operator.ocaml",
          "match": "\\b(or|mod|land|lor|lxor|lsl|lsr|asr)\\b"
        },
        {
          "comment": "method invocation",
          "name": "keyword.other.ocaml",
          "match": "#"
        },
        {
          "comment": "type annotation",
          "name": "keyword.other.ocaml",
          "match": ":"
        },
        {
          "comment": "field accessor",
          "name": "keyword.other.ocaml",
          "match": "\\."
        },
        {
          "comment": "semicolon or comma separator",
          "name": "keyword.other.ocaml",
          "match": "[,;]"
        }
      ]
    },

    "literals": {
      "patterns": [
        {
          "comment": "wildcard underscore",
          "name": "constant.language.ocaml",
          "match": "\\b_\\b"
        },

        {
          "comment": "boolean literal",
          "name": "constant.language.ocaml",
          "match": "\\b(true|false)\\b"
        },

        {
          "comment": "floating point decimal literal with exponent",
          "name": "constant.numeric.decimal.float.ocaml",
          "match": "\\b([0-9][0-9_]*(\\.[0-9_]*)?[eE][+-]?[0-9][0-9_]*)\\b"
        },
        {
          "comment": "floating point decimal literal",
          "name": "constant.numeric.decimal.float.ocaml",
          "match": "\\b([0-9][0-9_]*\\.[0-9_]*)\\b"
        },
        {
          "comment": "floating point hexadecimal literal with exponent part",
          "name": "constant.numeric.hexadecimal.float.ocaml",
          "match": "\\b((0x|0X)[0-9A-Fa-f][0-9A-Fa-f_]*(\\.[0-9A-Fa-f_]*)?[pP][+-]?[0-9][0-9_]*)\\b"
        },
        {
          "comment": "floating point hexadecimal literal",
          "name": "constant.numeric.hexadecimal.float.ocaml",
          "match": "\\b((0x|0X)[0-9A-Fa-f][0-9A-Fa-f_]*\\.[0-9A-Fa-f_]*)\\b"
        },

        {
          "comment": "decimal integer literal",
          "name": "constant.numeric.decimal.integer.ocaml",
          "match": "\\b([0-9][0-9_]*(l|L|n)?)\\b"
        },
        {
          "comment": "hexadecimal integer literal",
          "name": "constant.numeric.hexadecimal.integer.ocaml",
          "match": "\\b((0x|0X)[0-9A-Fa-f][0-9A-Fa-f_]*(l|L|n)?)\\b"
        },
        {
          "comment": "octal integer literal",
          "name": "constant.numeric.octal.integer.ocaml",
          "match": "\\b((0o|0O)[0-7][0-7_]*(l|L|n)?)\\b"
        },
        {
          "comment": "binary integer literal",
          "name": "constant.numeric.binary.integer.ocaml",
          "match": "\\b((0b|0B)[0-1][0-1_]*(l|L|n)?)\\b"
        },

        {
          "comment": "polymorphic variant tag",
          "name": "constant.language.polymorphic-variant.ocaml",
          "match": "\\`[A-Za-z][A-Za-z0-9_']*\\b"
        }
      ]
    },

    "types": {
      "patterns": [
        {
          "comment": "type parameter",
          "name": "storage.type.ocaml",
          "match": "'[A-Za-z][A-Za-z0-9_']*\\b"
        },
        {
          "comment": "builtin type",
          "name": "support.type.ocaml",
          "match": "\\b(unit|bool|int|int32|int64|nativeint|float|char|bytes|string)\\b"
        }
      ]
    },

    "identifiers": {
      "patterns": [
        {
          "comment": "capital identifier for constructor, exception, or module",
          "name": "constant.language.capital-identifier.ocaml",
          "match": "\\b[A-Z][A-Za-z0-9_']*('|\\b)"
        },
        {
          "comment": "lowercase identifier",
          "name": "source.ocaml",
          "match": "\\b[a-z_][A-Za-z0-9_']*('|\\b)"
        }
      ]
    }
  }
}
